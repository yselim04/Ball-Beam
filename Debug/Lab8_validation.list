
Lab8_validation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002340  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002470  08002470  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002470  08002470  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002470  08002470  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002478  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001024  20000028  0800249c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000104c  0800249c  0002104c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000398b  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f41  00000000  00000000  00023a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a0  00000000  00000000  00024960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000036a  00000000  00000000  00024e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001676a  00000000  00000000  0002516a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bfa  00000000  00000000  0003b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000854cc  00000000  00000000  000414ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001188  00000000  00000000  000c699c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c7b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08002438 	.word	0x08002438

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08002438 	.word	0x08002438

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <vApplicationGetIdleTaskMemory+0x28>)
 800094c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	4a05      	ldr	r2, [pc, #20]	; (8000968 <vApplicationGetIdleTaskMemory+0x2c>)
 8000952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000044 	.word	0x20000044
 8000968:	20000098 	.word	0x20000098

0800096c <main>:
uint32_t read_echo2(uint32_t timeout);
void sensorTask(void *pvParameters);
void motorTask(void *pvParameters);

int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af02      	add	r7, sp, #8
    // System and peripheral initialization
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; 						//enable GPIOA Clock
 8000972:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <main+0xec>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <main+0xec>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN ;
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <main+0xec>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a35      	ldr	r2, [pc, #212]	; (8000a58 <main+0xec>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	61d3      	str	r3, [r2, #28]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <main+0xec>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <main+0xec>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	61d3      	str	r3, [r2, #28]
    GPIOA->CRL &= ~GPIO_CRL_MODE0;
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <main+0xf0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <main+0xf0>)
 800099c:	f023 0303 	bic.w	r3, r3, #3
 80009a0:	6013      	str	r3, [r2, #0]
    GPIOA->CRH = 0x00002220 ;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <main+0xf0>)
 80009a4:	f242 2220 	movw	r2, #8736	; 0x2220
 80009a8:	605a      	str	r2, [r3, #4]
    GPIOA->CRL = 0x0A004242 ;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <main+0xf0>)
 80009ac:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <main+0xf4>)
 80009ae:	601a      	str	r2, [r3, #0]

    //configure Timer2 to generate microseconds delay
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <main+0xec>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <main+0xec>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 72 - 1;
 80009bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c0:	2247      	movs	r2, #71	; 0x47
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 1;
 80009c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c8:	2201      	movs	r2, #1
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CNT = 0;
 80009cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CR1 = TIM_CR1_CEN;
 80009d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]

    TIM3->PSC = 15 ;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <main+0xf8>)
 80009de:	220f      	movs	r2, #15
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 9999;
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <main+0xf8>)
 80009e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCER = 1 ;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <main+0xf8>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	621a      	str	r2, [r3, #32]
    TIM3->CCMR1 |= (0b1101<<3) ;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <main+0xf8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <main+0xf8>)
 80009f6:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80009fa:	6193      	str	r3, [r2, #24]
    TIM3->CR1 |= (1<<7) ;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <main+0xf8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <main+0xf8>)
 8000a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a06:	6013      	str	r3, [r2, #0]
    TIM3->EGR |= 1 ;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <main+0xf8>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <main+0xf8>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6153      	str	r3, [r2, #20]
    TIM3->CR1 |= 1 ;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <main+0xf8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <main+0xf8>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]
    TIM3->CCR1 = 790 ;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <main+0xf8>)
 8000a22:	f240 3216 	movw	r2, #790	; 0x316
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
    //vTaskDelay(pdMS_TO_TICKS(53));


    // Create tasks
    xTaskCreate(sensorTask, "SensorTask", 128, NULL, 1, NULL);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <main+0xfc>)
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <main+0x100>)
 8000a38:	f000 fc6b 	bl	8001312 <xTaskCreate>
    xTaskCreate(motorTask, "MotorTask", 128, NULL, 1, NULL);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	2301      	movs	r3, #1
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	4909      	ldr	r1, [pc, #36]	; (8000a70 <main+0x104>)
 8000a4a:	480a      	ldr	r0, [pc, #40]	; (8000a74 <main+0x108>)
 8000a4c:	f000 fc61 	bl	8001312 <xTaskCreate>

    // Start the scheduler
    vTaskStartScheduler();
 8000a50:	f000 fdc2 	bl	80015d8 <vTaskStartScheduler>


    while(1)
 8000a54:	e7fe      	b.n	8000a54 <main+0xe8>
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	0a004242 	.word	0x0a004242
 8000a64:	40000400 	.word	0x40000400
 8000a68:	08002450 	.word	0x08002450
 8000a6c:	08000a79 	.word	0x08000a79
 8000a70:	0800245c 	.word	0x0800245c
 8000a74:	08000ecd 	.word	0x08000ecd

08000a78 <sensorTask>:
        // Should never reach here
    }
}

void sensorTask(void *pvParameters)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    (void) pvParameters;

    while(1)
    {
        Trig_low; 												// turn off trig
 8000a80:	4bb7      	ldr	r3, [pc, #732]	; (8000d60 <sensorTask+0x2e8>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	4ab6      	ldr	r2, [pc, #728]	; (8000d60 <sensorTask+0x2e8>)
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	60d3      	str	r3, [r2, #12]
        delayuS(10); 											// wait 10 us
 8000a8c:	200a      	movs	r0, #10
 8000a8e:	f000 fa2d 	bl	8000eec <delayuS>
        Trig_high;  											// turn on trig
 8000a92:	4bb3      	ldr	r3, [pc, #716]	; (8000d60 <sensorTask+0x2e8>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	4ab2      	ldr	r2, [pc, #712]	; (8000d60 <sensorTask+0x2e8>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	60d3      	str	r3, [r2, #12]
        delayuS(10); 											// wait 10 us
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f000 fa24 	bl	8000eec <delayuS>
        Trig_low; 												// turn off trig
 8000aa4:	4bae      	ldr	r3, [pc, #696]	; (8000d60 <sensorTask+0x2e8>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4aad      	ldr	r2, [pc, #692]	; (8000d60 <sensorTask+0x2e8>)
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	60d3      	str	r3, [r2, #12]
        duration = read_echo(1000000); 							// measure the time of echo pin
 8000ab0:	48ac      	ldr	r0, [pc, #688]	; (8000d64 <sensorTask+0x2ec>)
 8000ab2:	f000 fa43 	bl	8000f3c <read_echo>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4aab      	ldr	r2, [pc, #684]	; (8000d68 <sensorTask+0x2f0>)
 8000aba:	6013      	str	r3, [r2, #0]
        distance = duration* 0.342 ;							// distance = duration / 2 * SOUND_SPEED
 8000abc:	4baa      	ldr	r3, [pc, #680]	; (8000d68 <sensorTask+0x2f0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fc87 	bl	80003d4 <__aeabi_ui2d>
 8000ac6:	a39c      	add	r3, pc, #624	; (adr r3, 8000d38 <sensorTask+0x2c0>)
 8000ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000acc:	f7ff fcfc 	bl	80004c8 <__aeabi_dmul>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f7ff ff08 	bl	80008ec <__aeabi_d2iz>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4aa3      	ldr	r2, [pc, #652]	; (8000d6c <sensorTask+0x2f4>)
 8000ae0:	6013      	str	r3, [r2, #0]
        if(distance<40){
 8000ae2:	4ba2      	ldr	r3, [pc, #648]	; (8000d6c <sensorTask+0x2f4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b27      	cmp	r3, #39	; 0x27
 8000ae8:	dc2a      	bgt.n	8000b40 <sensorTask+0xc8>
            setpoint =distance;
 8000aea:	4ba0      	ldr	r3, [pc, #640]	; (8000d6c <sensorTask+0x2f4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4aa0      	ldr	r2, [pc, #640]	; (8000d70 <sensorTask+0x2f8>)
 8000af0:	6013      	str	r3, [r2, #0]
            setpoint = 0.56*setpoint + 0.44*setpoint_prec  ;
 8000af2:	4b9f      	ldr	r3, [pc, #636]	; (8000d70 <sensorTask+0x2f8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fc7c 	bl	80003f4 <__aeabi_i2d>
 8000afc:	a390      	add	r3, pc, #576	; (adr r3, 8000d40 <sensorTask+0x2c8>)
 8000afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b02:	f7ff fce1 	bl	80004c8 <__aeabi_dmul>
 8000b06:	4602      	mov	r2, r0
 8000b08:	460b      	mov	r3, r1
 8000b0a:	4614      	mov	r4, r2
 8000b0c:	461d      	mov	r5, r3
 8000b0e:	4b99      	ldr	r3, [pc, #612]	; (8000d74 <sensorTask+0x2fc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fc6e 	bl	80003f4 <__aeabi_i2d>
 8000b18:	a38b      	add	r3, pc, #556	; (adr r3, 8000d48 <sensorTask+0x2d0>)
 8000b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1e:	f7ff fcd3 	bl	80004c8 <__aeabi_dmul>
 8000b22:	4602      	mov	r2, r0
 8000b24:	460b      	mov	r3, r1
 8000b26:	4620      	mov	r0, r4
 8000b28:	4629      	mov	r1, r5
 8000b2a:	f7ff fb17 	bl	800015c <__adddf3>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	460b      	mov	r3, r1
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	f7ff fed9 	bl	80008ec <__aeabi_d2iz>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a8c      	ldr	r2, [pc, #560]	; (8000d70 <sensorTask+0x2f8>)
 8000b3e:	6013      	str	r3, [r2, #0]

        }
        vTaskDelay(pdMS_TO_TICKS(23));
 8000b40:	2017      	movs	r0, #23
 8000b42:	f000 fd15 	bl	8001570 <vTaskDelay>
        Trig2_low;
 8000b46:	4b86      	ldr	r3, [pc, #536]	; (8000d60 <sensorTask+0x2e8>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	4a85      	ldr	r2, [pc, #532]	; (8000d60 <sensorTask+0x2e8>)
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	60d3      	str	r3, [r2, #12]
        delayuS(10);
 8000b52:	200a      	movs	r0, #10
 8000b54:	f000 f9ca 	bl	8000eec <delayuS>
        Trig2_high;
 8000b58:	4b81      	ldr	r3, [pc, #516]	; (8000d60 <sensorTask+0x2e8>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a80      	ldr	r2, [pc, #512]	; (8000d60 <sensorTask+0x2e8>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	60d3      	str	r3, [r2, #12]
        delayuS(10);
 8000b64:	200a      	movs	r0, #10
 8000b66:	f000 f9c1 	bl	8000eec <delayuS>
        Trig2_low;
 8000b6a:	4b7d      	ldr	r3, [pc, #500]	; (8000d60 <sensorTask+0x2e8>)
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	4a7c      	ldr	r2, [pc, #496]	; (8000d60 <sensorTask+0x2e8>)
 8000b70:	f023 0304 	bic.w	r3, r3, #4
 8000b74:	60d3      	str	r3, [r2, #12]
        duration2 = read_echo2(1000000);
 8000b76:	487b      	ldr	r0, [pc, #492]	; (8000d64 <sensorTask+0x2ec>)
 8000b78:	f000 fa20 	bl	8000fbc <read_echo2>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a7e      	ldr	r2, [pc, #504]	; (8000d78 <sensorTask+0x300>)
 8000b80:	6013      	str	r3, [r2, #0]
        distance2 = duration2* 0.342 ;
 8000b82:	4b7d      	ldr	r3, [pc, #500]	; (8000d78 <sensorTask+0x300>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fc24 	bl	80003d4 <__aeabi_ui2d>
 8000b8c:	a36a      	add	r3, pc, #424	; (adr r3, 8000d38 <sensorTask+0x2c0>)
 8000b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b92:	f7ff fc99 	bl	80004c8 <__aeabi_dmul>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f7ff fea5 	bl	80008ec <__aeabi_d2iz>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a75      	ldr	r2, [pc, #468]	; (8000d7c <sensorTask+0x304>)
 8000ba6:	6013      	str	r3, [r2, #0]
        if(distance2<40){
 8000ba8:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <sensorTask+0x304>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b27      	cmp	r3, #39	; 0x27
 8000bae:	dc2a      	bgt.n	8000c06 <sensorTask+0x18e>
            	y =distance2;
 8000bb0:	4b72      	ldr	r3, [pc, #456]	; (8000d7c <sensorTask+0x304>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a72      	ldr	r2, [pc, #456]	; (8000d80 <sensorTask+0x308>)
 8000bb6:	6013      	str	r3, [r2, #0]
            	y = 0.56*y + 0.44*y_prec  ;
 8000bb8:	4b71      	ldr	r3, [pc, #452]	; (8000d80 <sensorTask+0x308>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fc19 	bl	80003f4 <__aeabi_i2d>
 8000bc2:	a35f      	add	r3, pc, #380	; (adr r3, 8000d40 <sensorTask+0x2c8>)
 8000bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc8:	f7ff fc7e 	bl	80004c8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4614      	mov	r4, r2
 8000bd2:	461d      	mov	r5, r3
 8000bd4:	4b6b      	ldr	r3, [pc, #428]	; (8000d84 <sensorTask+0x30c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fc0b 	bl	80003f4 <__aeabi_i2d>
 8000bde:	a35a      	add	r3, pc, #360	; (adr r3, 8000d48 <sensorTask+0x2d0>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fc70 	bl	80004c8 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	f7ff fab4 	bl	800015c <__adddf3>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fe76 	bl	80008ec <__aeabi_d2iz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a5f      	ldr	r2, [pc, #380]	; (8000d80 <sensorTask+0x308>)
 8000c04:	6013      	str	r3, [r2, #0]

                }
        vTaskDelay(pdMS_TO_TICKS(23));
 8000c06:	2017      	movs	r0, #23
 8000c08:	f000 fcb2 	bl	8001570 <vTaskDelay>
        error = (setpoint - y);
 8000c0c:	4b58      	ldr	r3, [pc, #352]	; (8000d70 <sensorTask+0x2f8>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <sensorTask+0x308>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fbec 	bl	80003f4 <__aeabi_i2d>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4959      	ldr	r1, [pc, #356]	; (8000d88 <sensorTask+0x310>)
 8000c22:	e9c1 2300 	strd	r2, r3, [r1]
        P = Kp*error;
 8000c26:	4b59      	ldr	r3, [pc, #356]	; (8000d8c <sensorTask+0x314>)
 8000c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c2c:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <sensorTask+0x310>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff fc49 	bl	80004c8 <__aeabi_dmul>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4955      	ldr	r1, [pc, #340]	; (8000d90 <sensorTask+0x318>)
 8000c3c:	e9c1 2300 	strd	r2, r3, [r1]
        if(Sat == 0)
 8000c40:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <sensorTask+0x31c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11f      	bne.n	8000c88 <sensorTask+0x210>
        	I = T*Ki*error + I_prec ;
 8000c48:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <sensorTask+0x320>)
 8000c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000c56:	f7ff fc37 	bl	80004c8 <__aeabi_dmul>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <sensorTask+0x310>)
 8000c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c68:	f7ff fc2e 	bl	80004c8 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4610      	mov	r0, r2
 8000c72:	4619      	mov	r1, r3
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <sensorTask+0x324>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fa6f 	bl	800015c <__adddf3>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4947      	ldr	r1, [pc, #284]	; (8000da0 <sensorTask+0x328>)
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
        D = (Kd/T)*(error-error_prec)  ;
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <sensorTask+0x32c>)
 8000c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000c96:	f7ff fd41 	bl	800071c <__aeabi_ddiv>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4614      	mov	r4, r2
 8000ca0:	461d      	mov	r5, r3
 8000ca2:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <sensorTask+0x310>)
 8000ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca8:	4b3f      	ldr	r3, [pc, #252]	; (8000da8 <sensorTask+0x330>)
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	f7ff fa53 	bl	8000158 <__aeabi_dsub>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	4629      	mov	r1, r5
 8000cba:	f7ff fc05 	bl	80004c8 <__aeabi_dmul>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	493a      	ldr	r1, [pc, #232]	; (8000dac <sensorTask+0x334>)
 8000cc4:	e9c1 2300 	strd	r2, r3, [r1]
        D = 0.73*D + 0.27*D_prec;
 8000cc8:	4b38      	ldr	r3, [pc, #224]	; (8000dac <sensorTask+0x334>)
 8000cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cce:	a320      	add	r3, pc, #128	; (adr r3, 8000d50 <sensorTask+0x2d8>)
 8000cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd4:	f7ff fbf8 	bl	80004c8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4614      	mov	r4, r2
 8000cde:	461d      	mov	r5, r3
 8000ce0:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <sensorTask+0x338>)
 8000ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce6:	a31c      	add	r3, pc, #112	; (adr r3, 8000d58 <sensorTask+0x2e0>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f7ff fbec 	bl	80004c8 <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	f7ff fa30 	bl	800015c <__adddf3>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	492a      	ldr	r1, [pc, #168]	; (8000dac <sensorTask+0x334>)
 8000d02:	e9c1 2300 	strd	r2, r3, [r1]
        U = P + D + I + Uzero ;
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <sensorTask+0x318>)
 8000d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <sensorTask+0x334>)
 8000d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d12:	f7ff fa23 	bl	800015c <__adddf3>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <sensorTask+0x328>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fa1a 	bl	800015c <__adddf3>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	e040      	b.n	8000db4 <sensorTask+0x33c>
 8000d32:	bf00      	nop
 8000d34:	f3af 8000 	nop.w
 8000d38:	f7ced917 	.word	0xf7ced917
 8000d3c:	3fd5e353 	.word	0x3fd5e353
 8000d40:	1eb851ec 	.word	0x1eb851ec
 8000d44:	3fe1eb85 	.word	0x3fe1eb85
 8000d48:	c28f5c29 	.word	0xc28f5c29
 8000d4c:	3fdc28f5 	.word	0x3fdc28f5
 8000d50:	f5c28f5c 	.word	0xf5c28f5c
 8000d54:	3fe75c28 	.word	0x3fe75c28
 8000d58:	147ae148 	.word	0x147ae148
 8000d5c:	3fd147ae 	.word	0x3fd147ae
 8000d60:	40010800 	.word	0x40010800
 8000d64:	000f4240 	.word	0x000f4240
 8000d68:	20000298 	.word	0x20000298
 8000d6c:	2000029c 	.word	0x2000029c
 8000d70:	200002b0 	.word	0x200002b0
 8000d74:	200002b4 	.word	0x200002b4
 8000d78:	200002a0 	.word	0x200002a0
 8000d7c:	200002a4 	.word	0x200002a4
 8000d80:	200002bc 	.word	0x200002bc
 8000d84:	200002b8 	.word	0x200002b8
 8000d88:	200002a8 	.word	0x200002a8
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	200002c8 	.word	0x200002c8
 8000d94:	200002f8 	.word	0x200002f8
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	200002e8 	.word	0x200002e8
 8000da0:	200002d0 	.word	0x200002d0
 8000da4:	20000010 	.word	0x20000010
 8000da8:	200002c0 	.word	0x200002c0
 8000dac:	200002d8 	.word	0x200002d8
 8000db0:	200002f0 	.word	0x200002f0
 8000db4:	a336      	add	r3, pc, #216	; (adr r3, 8000e90 <sensorTask+0x418>)
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	f7ff f9cf 	bl	800015c <__adddf3>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f7ff fd91 	bl	80008ec <__aeabi_d2iz>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a32      	ldr	r2, [pc, #200]	; (8000e98 <sensorTask+0x420>)
 8000dce:	6013      	str	r3, [r2, #0]
        if( U < Umin){
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <sensorTask+0x420>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f240 3251 	movw	r2, #849	; 0x351
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	dc07      	bgt.n	8000dec <sensorTask+0x374>
            U = Umin;
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <sensorTask+0x420>)
 8000dde:	f240 3252 	movw	r2, #850	; 0x352
 8000de2:	601a      	str	r2, [r3, #0]
            Sat = 1 ;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <sensorTask+0x424>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e010      	b.n	8000e0e <sensorTask+0x396>
        }
        else{
            if( U > Umax){
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <sensorTask+0x420>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000df4:	4293      	cmp	r3, r2
 8000df6:	dd07      	ble.n	8000e08 <sensorTask+0x390>
                U = Umax ;
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <sensorTask+0x420>)
 8000dfa:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000dfe:	601a      	str	r2, [r3, #0]
                Sat = 1 ;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <sensorTask+0x424>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e002      	b.n	8000e0e <sensorTask+0x396>
            }
            else
            	Sat = 0 ;
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <sensorTask+0x424>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
        }
        if (y <= setpoint+2 && y >= setpoint-2) {
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <sensorTask+0x428>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	1c9a      	adds	r2, r3, #2
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <sensorTask+0x42c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	db0e      	blt.n	8000e3a <sensorTask+0x3c2>
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <sensorTask+0x428>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1e9a      	subs	r2, r3, #2
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <sensorTask+0x42c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	dc07      	bgt.n	8000e3a <sensorTask+0x3c2>
                    GPIOA->ODR = (0b010<<9);  // Set specific pin pattern if y equals setpoint
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <sensorTask+0x430>)
 8000e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e30:	60da      	str	r2, [r3, #12]
                    vTaskDelay(pdMS_TO_TICKS(4));
 8000e32:	2004      	movs	r0, #4
 8000e34:	f000 fb9c 	bl	8001570 <vTaskDelay>
 8000e38:	e00e      	b.n	8000e58 <sensorTask+0x3e0>
                } else if (y > setpoint) {
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <sensorTask+0x42c>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <sensorTask+0x428>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dd04      	ble.n	8000e50 <sensorTask+0x3d8>
                    GPIOA->ODR = (0b100<<9);  // Set another pin pattern if y is greater than setpoint
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <sensorTask+0x430>)
 8000e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	e003      	b.n	8000e58 <sensorTask+0x3e0>
                } else {
                    GPIOA->ODR = (0b001<<9);  // Set another pin pattern if y is less than setpoint
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <sensorTask+0x430>)
 8000e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e56:	60da      	str	r2, [r3, #12]
        }
        I_prec = I;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <sensorTask+0x434>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <sensorTask+0x438>)
 8000e60:	e9c1 2300 	strd	r2, r3, [r1]
        error_prec = error;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <sensorTask+0x43c>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	4913      	ldr	r1, [pc, #76]	; (8000eb8 <sensorTask+0x440>)
 8000e6c:	e9c1 2300 	strd	r2, r3, [r1]
        setpoint_prec = setpoint ;
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <sensorTask+0x428>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <sensorTask+0x444>)
 8000e76:	6013      	str	r3, [r2, #0]
        y_prec = y ;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <sensorTask+0x42c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <sensorTask+0x448>)
 8000e7e:	6013      	str	r3, [r2, #0]
        D = D_prec ;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <sensorTask+0x44c>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	4910      	ldr	r1, [pc, #64]	; (8000ec8 <sensorTask+0x450>)
 8000e88:	e9c1 2300 	strd	r2, r3, [r1]
        Trig_low; 												// turn off trig
 8000e8c:	e5f8      	b.n	8000a80 <sensorTask+0x8>
 8000e8e:	bf00      	nop
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40913000 	.word	0x40913000
 8000e98:	200002e0 	.word	0x200002e0
 8000e9c:	200002f8 	.word	0x200002f8
 8000ea0:	200002b0 	.word	0x200002b0
 8000ea4:	200002bc 	.word	0x200002bc
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	200002d0 	.word	0x200002d0
 8000eb0:	200002e8 	.word	0x200002e8
 8000eb4:	200002a8 	.word	0x200002a8
 8000eb8:	200002c0 	.word	0x200002c0
 8000ebc:	200002b4 	.word	0x200002b4
 8000ec0:	200002b8 	.word	0x200002b8
 8000ec4:	200002f0 	.word	0x200002f0
 8000ec8:	200002d8 	.word	0x200002d8

08000ecc <motorTask>:
    }
}

void motorTask(void *pvParameters){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	while(1){
	    TIM3->CCR1 = U ;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <motorTask+0x18>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <motorTask+0x1c>)
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
	    vTaskDelay(pdMS_TO_TICKS(30));
 8000edc:	201e      	movs	r0, #30
 8000ede:	f000 fb47 	bl	8001570 <vTaskDelay>
	    TIM3->CCR1 = U ;
 8000ee2:	e7f7      	b.n	8000ed4 <motorTask+0x8>
 8000ee4:	200002e0 	.word	0x200002e0
 8000ee8:	40000400 	.word	0x40000400

08000eec <delayuS>:
{
    vTaskDelay(pdMS_TO_TICKS(ms));
}

void delayuS(uint32_t us)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < us; i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e016      	b.n	8000f28 <delayuS+0x3c>
    {
        TIM2->CNT = 0;
 8000efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
        while (!(TIM2->SR & TIM_SR_UIF)) {}
 8000f02:	bf00      	nop
 8000f04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f8      	beq.n	8000f04 <delayuS+0x18>
        TIM2->SR &= ~TIM_SR_UIF;
 8000f12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6113      	str	r3, [r2, #16]
    for (int i = 0; i < us; i++)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8e4      	bhi.n	8000efa <delayuS+0xe>
    }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <read_echo>:

uint32_t read_echo(uint32_t timeout)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	duration = 0 ;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <read_echo+0x78>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
    while (!((GPIOA->IDR) & GPIO_IDR_IDR1))
 8000f4a:	e00e      	b.n	8000f6a <read_echo+0x2e>
    {
        duration++;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <read_echo+0x78>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <read_echo+0x78>)
 8000f54:	6013      	str	r3, [r2, #0]
        delayuS(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff ffc8 	bl	8000eec <delayuS>
        if (duration > timeout)
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <read_echo+0x78>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d201      	bcs.n	8000f6a <read_echo+0x2e>
        {
            return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e020      	b.n	8000fac <read_echo+0x70>
    while (!((GPIOA->IDR) & GPIO_IDR_IDR1))
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <read_echo+0x7c>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0ea      	beq.n	8000f4c <read_echo+0x10>
        }
    }
	duration = 0 ;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <read_echo+0x78>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
    while ((GPIOA->IDR & GPIO_IDR_IDR1))
 8000f7c:	e00e      	b.n	8000f9c <read_echo+0x60>
    {
        duration++;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <read_echo+0x78>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <read_echo+0x78>)
 8000f86:	6013      	str	r3, [r2, #0]
        delayuS(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff ffaf 	bl	8000eec <delayuS>
        if (duration > timeout)
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <read_echo+0x78>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d201      	bcs.n	8000f9c <read_echo+0x60>
        {
            return 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e007      	b.n	8000fac <read_echo+0x70>
    while ((GPIOA->IDR & GPIO_IDR_IDR1))
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <read_echo+0x7c>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ea      	bne.n	8000f7e <read_echo+0x42>
        }
    }
    return duration;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <read_echo+0x78>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000298 	.word	0x20000298
 8000fb8:	40010800 	.word	0x40010800

08000fbc <read_echo2>:
uint32_t read_echo2(uint32_t timeout)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	duration2 = 0 ;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <read_echo2+0x78>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
    while (!((GPIOA->IDR) & GPIO_IDR_IDR3))
 8000fca:	e00e      	b.n	8000fea <read_echo2+0x2e>
    {
        duration2++;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <read_echo2+0x78>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a18      	ldr	r2, [pc, #96]	; (8001034 <read_echo2+0x78>)
 8000fd4:	6013      	str	r3, [r2, #0]
        delayuS(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff ff88 	bl	8000eec <delayuS>
        if (duration2 > timeout)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <read_echo2+0x78>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d201      	bcs.n	8000fea <read_echo2+0x2e>
        {
            return 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e020      	b.n	800102c <read_echo2+0x70>
    while (!((GPIOA->IDR) & GPIO_IDR_IDR3))
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <read_echo2+0x7c>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0ea      	beq.n	8000fcc <read_echo2+0x10>
        }
    }
	duration2 = 0 ;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <read_echo2+0x78>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
    while ((GPIOA->IDR & GPIO_IDR_IDR3))
 8000ffc:	e00e      	b.n	800101c <read_echo2+0x60>
    {
        duration2++;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <read_echo2+0x78>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <read_echo2+0x78>)
 8001006:	6013      	str	r3, [r2, #0]
        delayuS(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff ff6f 	bl	8000eec <delayuS>
        if (duration2 > timeout)
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <read_echo2+0x78>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	d201      	bcs.n	800101c <read_echo2+0x60>
        {
            return 0;
 8001018:	2300      	movs	r3, #0
 800101a:	e007      	b.n	800102c <read_echo2+0x70>
    while ((GPIOA->IDR & GPIO_IDR_IDR3))
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <read_echo2+0x7c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ea      	bne.n	8000ffe <read_echo2+0x42>
        }
    }
    return duration2;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <read_echo2+0x78>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200002a0 	.word	0x200002a0
 8001038:	40010800 	.word	0x40010800

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106a:	f000 f835 	bl	80010d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800106e:	f000 fdaf 	bl	8001bd0 <xTaskGetSchedulerState>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d001      	beq.n	800107c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001078:	f000 ff9e 	bl	8001fb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 800108c:	f7ff fff8 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001092:	490c      	ldr	r1, [pc, #48]	; (80010c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a8:	4c09      	ldr	r4, [pc, #36]	; (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f001 f99b 	bl	80023f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff fc57 	bl	800096c <main>
  bx lr
 80010be:	4770      	bx	lr
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010c8:	08002478 	.word	0x08002478
  ldr r2, =_sbss
 80010cc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80010d0:	2000104c 	.word	0x2000104c

080010d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_2_IRQHandler>
	...

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x1c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x20>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <HAL_IncTick+0x20>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	2000001c 	.word	0x2000001c
 80010f8:	200002fc 	.word	0x200002fc

080010fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 0208 	add.w	r2, r3, #8
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f103 0208 	add.w	r2, r3, #8
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f103 0208 	add.w	r2, r3, #8
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ae:	d103      	bne.n	80011b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	e00c      	b.n	80011d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3308      	adds	r3, #8
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	e002      	b.n	80011c6 <vListInsert+0x2e>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d2f6      	bcs.n	80011c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6892      	ldr	r2, [r2, #8]
 800121e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6852      	ldr	r2, [r2, #4]
 8001228:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	d103      	bne.n	800123c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800125a:	b580      	push	{r7, lr}
 800125c:	b08e      	sub	sp, #56	; 0x38
 800125e:	af04      	add	r7, sp, #16
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10a      	bne.n	8001284 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001272:	f383 8811 	msr	BASEPRI, r3
 8001276:	f3bf 8f6f 	isb	sy
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001280:	bf00      	nop
 8001282:	e7fe      	b.n	8001282 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10a      	bne.n	80012a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	f3bf 8f4f 	dsb	sy
 800129a:	61fb      	str	r3, [r7, #28]
}
 800129c:	bf00      	nop
 800129e:	e7fe      	b.n	800129e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80012a0:	2354      	movs	r3, #84	; 0x54
 80012a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b54      	cmp	r3, #84	; 0x54
 80012a8:	d00a      	beq.n	80012c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80012aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ae:	f383 8811 	msr	BASEPRI, r3
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	f3bf 8f4f 	dsb	sy
 80012ba:	61bb      	str	r3, [r7, #24]
}
 80012bc:	bf00      	nop
 80012be:	e7fe      	b.n	80012be <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80012c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d01e      	beq.n	8001304 <xTaskCreateStatic+0xaa>
 80012c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d01b      	beq.n	8001304 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80012cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	2202      	movs	r2, #2
 80012da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80012de:	2300      	movs	r3, #0
 80012e0:	9303      	str	r3, [sp, #12]
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f850 	bl	800139c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80012fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012fe:	f000 f8cd 	bl	800149c <prvAddNewTaskToReadyList>
 8001302:	e001      	b.n	8001308 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001308:	697b      	ldr	r3, [r7, #20]
	}
 800130a:	4618      	mov	r0, r3
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001312:	b580      	push	{r7, lr}
 8001314:	b08c      	sub	sp, #48	; 0x30
 8001316:	af04      	add	r7, sp, #16
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fe8a 	bl	8002040 <pvPortMalloc>
 800132c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00e      	beq.n	8001352 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001334:	2054      	movs	r0, #84	; 0x54
 8001336:	f000 fe83 	bl	8002040 <pvPortMalloc>
 800133a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
 8001348:	e005      	b.n	8001356 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f000 ff3c 	bl	80021c8 <vPortFree>
 8001350:	e001      	b.n	8001356 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d017      	beq.n	800138c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	2300      	movs	r3, #0
 8001368:	9303      	str	r3, [sp, #12]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f80e 	bl	800139c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001380:	69f8      	ldr	r0, [r7, #28]
 8001382:	f000 f88b 	bl	800149c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001386:	2301      	movs	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	e002      	b.n	8001392 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001392:	69bb      	ldr	r3, [r7, #24]
	}
 8001394:	4618      	mov	r0, r3
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013b4:	3b01      	subs	r3, #1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f023 0307 	bic.w	r3, r3, #7
 80013c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80013ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d2:	f383 8811 	msr	BASEPRI, r3
 80013d6:	f3bf 8f6f 	isb	sy
 80013da:	f3bf 8f4f 	dsb	sy
 80013de:	617b      	str	r3, [r7, #20]
}
 80013e0:	bf00      	nop
 80013e2:	e7fe      	b.n	80013e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	e012      	b.n	8001410 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	7819      	ldrb	r1, [r3, #0]
 80013f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	3334      	adds	r3, #52	; 0x34
 80013fa:	460a      	mov	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d9e9      	bls.n	80013ea <prvInitialiseNewTask+0x4e>
 8001416:	e000      	b.n	800141a <prvInitialiseNewTask+0x7e>
		{
			break;
 8001418:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	2b06      	cmp	r3, #6
 8001426:	d901      	bls.n	800142c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001428:	2306      	movs	r3, #6
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001436:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143a:	2200      	movs	r2, #0
 800143c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	3304      	adds	r3, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fe79 	bl	800113a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144a:	3318      	adds	r3, #24
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe74 	bl	800113a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145a:	f1c3 0207 	rsb	r2, r3, #7
 800145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146a:	2200      	movs	r2, #0
 800146c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	69b8      	ldr	r0, [r7, #24]
 800147c:	f000 fc2c 	bl	8001cd8 <pxPortInitialiseStack>
 8001480:	4602      	mov	r2, r0
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80014a4:	f000 fd0a 	bl	8001ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <prvAddNewTaskToReadyList+0xb8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a29      	ldr	r2, [pc, #164]	; (8001554 <prvAddNewTaskToReadyList+0xb8>)
 80014b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <prvAddNewTaskToReadyList+0xbc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <prvAddNewTaskToReadyList+0xbc>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <prvAddNewTaskToReadyList+0xb8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d110      	bne.n	80014ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80014c8:	f000 fac0 	bl	8001a4c <prvInitialiseTaskLists>
 80014cc:	e00d      	b.n	80014ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <prvAddNewTaskToReadyList+0xc0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <prvAddNewTaskToReadyList+0xbc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d802      	bhi.n	80014ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <prvAddNewTaskToReadyList+0xbc>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <prvAddNewTaskToReadyList+0xc4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <prvAddNewTaskToReadyList+0xc4>)
 80014f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	2201      	movs	r2, #1
 80014fa:	409a      	lsls	r2, r3
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <prvAddNewTaskToReadyList+0xc8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <prvAddNewTaskToReadyList+0xc8>)
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <prvAddNewTaskToReadyList+0xcc>)
 8001514:	441a      	add	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4610      	mov	r0, r2
 800151e:	f7ff fe18 	bl	8001152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001522:	f000 fcfb 	bl	8001f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <prvAddNewTaskToReadyList+0xc0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00e      	beq.n	800154c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <prvAddNewTaskToReadyList+0xbc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <prvAddNewTaskToReadyList+0xd0>)
 800153e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f3bf 8f4f 	dsb	sy
 8001548:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000400 	.word	0x20000400
 8001558:	20000300 	.word	0x20000300
 800155c:	2000040c 	.word	0x2000040c
 8001560:	2000041c 	.word	0x2000041c
 8001564:	20000408 	.word	0x20000408
 8001568:	20000304 	.word	0x20000304
 800156c:	e000ed04 	.word	0xe000ed04

08001570 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d017      	beq.n	80015b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <vTaskDelay+0x60>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00a      	beq.n	80015a0 <vTaskDelay+0x30>
	__asm volatile
 800158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158e:	f383 8811 	msr	BASEPRI, r3
 8001592:	f3bf 8f6f 	isb	sy
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	60bb      	str	r3, [r7, #8]
}
 800159c:	bf00      	nop
 800159e:	e7fe      	b.n	800159e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80015a0:	f000 f87a 	bl	8001698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fb30 	bl	8001c0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80015ac:	f000 f882 	bl	80016b4 <xTaskResumeAll>
 80015b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <vTaskDelay+0x64>)
 80015ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	f3bf 8f4f 	dsb	sy
 80015c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000428 	.word	0x20000428
 80015d4:	e000ed04 	.word	0xe000ed04

080015d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80015e6:	463a      	mov	r2, r7
 80015e8:	1d39      	adds	r1, r7, #4
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f9a4 	bl	800093c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80015f4:	6839      	ldr	r1, [r7, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	9202      	str	r2, [sp, #8]
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	460a      	mov	r2, r1
 8001606:	491e      	ldr	r1, [pc, #120]	; (8001680 <vTaskStartScheduler+0xa8>)
 8001608:	481e      	ldr	r0, [pc, #120]	; (8001684 <vTaskStartScheduler+0xac>)
 800160a:	f7ff fe26 	bl	800125a <xTaskCreateStatic>
 800160e:	4603      	mov	r3, r0
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <vTaskStartScheduler+0xb0>)
 8001612:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <vTaskStartScheduler+0xb0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800161c:	2301      	movs	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e001      	b.n	8001626 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d116      	bne.n	800165a <vTaskStartScheduler+0x82>
	__asm volatile
 800162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001630:	f383 8811 	msr	BASEPRI, r3
 8001634:	f3bf 8f6f 	isb	sy
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	613b      	str	r3, [r7, #16]
}
 800163e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <vTaskStartScheduler+0xb4>)
 8001642:	f04f 32ff 	mov.w	r2, #4294967295
 8001646:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <vTaskStartScheduler+0xb8>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <vTaskStartScheduler+0xbc>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001654:	f000 fbc0 	bl	8001dd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001658:	e00e      	b.n	8001678 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d10a      	bne.n	8001678 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001666:	f383 8811 	msr	BASEPRI, r3
 800166a:	f3bf 8f6f 	isb	sy
 800166e:	f3bf 8f4f 	dsb	sy
 8001672:	60fb      	str	r3, [r7, #12]
}
 8001674:	bf00      	nop
 8001676:	e7fe      	b.n	8001676 <vTaskStartScheduler+0x9e>
}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08002468 	.word	0x08002468
 8001684:	08001a1d 	.word	0x08001a1d
 8001688:	20000424 	.word	0x20000424
 800168c:	20000420 	.word	0x20000420
 8001690:	2000040c 	.word	0x2000040c
 8001694:	20000404 	.word	0x20000404

08001698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <vTaskSuspendAll+0x18>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <vTaskSuspendAll+0x18>)
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000428 	.word	0x20000428

080016b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <xTaskResumeAll+0x114>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10a      	bne.n	80016e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80016ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ce:	f383 8811 	msr	BASEPRI, r3
 80016d2:	f3bf 8f6f 	isb	sy
 80016d6:	f3bf 8f4f 	dsb	sy
 80016da:	603b      	str	r3, [r7, #0]
}
 80016dc:	bf00      	nop
 80016de:	e7fe      	b.n	80016de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80016e0:	f000 fbec 	bl	8001ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80016e4:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <xTaskResumeAll+0x114>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	4a37      	ldr	r2, [pc, #220]	; (80017c8 <xTaskResumeAll+0x114>)
 80016ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <xTaskResumeAll+0x114>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d161      	bne.n	80017ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <xTaskResumeAll+0x118>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d05d      	beq.n	80017ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016fe:	e02e      	b.n	800175e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <xTaskResumeAll+0x11c>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3318      	adds	r3, #24
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fd7b 	bl	8001208 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3304      	adds	r3, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fd76 	bl	8001208 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	2201      	movs	r2, #1
 8001722:	409a      	lsls	r2, r3
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <xTaskResumeAll+0x120>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4313      	orrs	r3, r2
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <xTaskResumeAll+0x120>)
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <xTaskResumeAll+0x124>)
 800173c:	441a      	add	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3304      	adds	r3, #4
 8001742:	4619      	mov	r1, r3
 8001744:	4610      	mov	r0, r2
 8001746:	f7ff fd04 	bl	8001152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <xTaskResumeAll+0x128>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	429a      	cmp	r2, r3
 8001756:	d302      	bcc.n	800175e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <xTaskResumeAll+0x12c>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <xTaskResumeAll+0x11c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1cc      	bne.n	8001700 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800176c:	f000 fa0c 	bl	8001b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <xTaskResumeAll+0x130>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d010      	beq.n	800179e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800177c:	f000 f836 	bl	80017ec <xTaskIncrementTick>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <xTaskResumeAll+0x12c>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f1      	bne.n	800177c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <xTaskResumeAll+0x130>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <xTaskResumeAll+0x12c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <xTaskResumeAll+0x134>)
 80017ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f3bf 8f4f 	dsb	sy
 80017b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80017ba:	f000 fbaf 	bl	8001f1c <vPortExitCritical>

	return xAlreadyYielded;
 80017be:	68bb      	ldr	r3, [r7, #8]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000428 	.word	0x20000428
 80017cc:	20000400 	.word	0x20000400
 80017d0:	200003c0 	.word	0x200003c0
 80017d4:	20000408 	.word	0x20000408
 80017d8:	20000304 	.word	0x20000304
 80017dc:	20000300 	.word	0x20000300
 80017e0:	20000414 	.word	0x20000414
 80017e4:	20000410 	.word	0x20000410
 80017e8:	e000ed04 	.word	0xe000ed04

080017ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <xTaskIncrementTick+0x150>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 808d 	bne.w	800191a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <xTaskIncrementTick+0x154>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001808:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <xTaskIncrementTick+0x154>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d120      	bne.n	8001856 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001814:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <xTaskIncrementTick+0x158>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00a      	beq.n	8001834 <xTaskIncrementTick+0x48>
	__asm volatile
 800181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001822:	f383 8811 	msr	BASEPRI, r3
 8001826:	f3bf 8f6f 	isb	sy
 800182a:	f3bf 8f4f 	dsb	sy
 800182e:	603b      	str	r3, [r7, #0]
}
 8001830:	bf00      	nop
 8001832:	e7fe      	b.n	8001832 <xTaskIncrementTick+0x46>
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <xTaskIncrementTick+0x158>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b43      	ldr	r3, [pc, #268]	; (8001948 <xTaskIncrementTick+0x15c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a41      	ldr	r2, [pc, #260]	; (8001944 <xTaskIncrementTick+0x158>)
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4a41      	ldr	r2, [pc, #260]	; (8001948 <xTaskIncrementTick+0x15c>)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b40      	ldr	r3, [pc, #256]	; (800194c <xTaskIncrementTick+0x160>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	4a3f      	ldr	r2, [pc, #252]	; (800194c <xTaskIncrementTick+0x160>)
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	f000 f999 	bl	8001b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001856:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <xTaskIncrementTick+0x164>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d34d      	bcc.n	80018fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <xTaskIncrementTick+0x158>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <xTaskIncrementTick+0x82>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <xTaskIncrementTick+0x84>
 800186e:	2300      	movs	r3, #0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <xTaskIncrementTick+0x164>)
 8001876:	f04f 32ff 	mov.w	r2, #4294967295
 800187a:	601a      	str	r2, [r3, #0]
					break;
 800187c:	e03e      	b.n	80018fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <xTaskIncrementTick+0x158>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	d203      	bcs.n	800189e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001896:	4a2e      	ldr	r2, [pc, #184]	; (8001950 <xTaskIncrementTick+0x164>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6013      	str	r3, [r2, #0]
						break;
 800189c:	e02e      	b.n	80018fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3304      	adds	r3, #4
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fcb0 	bl	8001208 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3318      	adds	r3, #24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fca7 	bl	8001208 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	2201      	movs	r2, #1
 80018c0:	409a      	lsls	r2, r3
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <xTaskIncrementTick+0x168>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	4a22      	ldr	r2, [pc, #136]	; (8001954 <xTaskIncrementTick+0x168>)
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <xTaskIncrementTick+0x16c>)
 80018da:	441a      	add	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3304      	adds	r3, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f7ff fc35 	bl	8001152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <xTaskIncrementTick+0x170>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3b4      	bcc.n	8001860 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018fa:	e7b1      	b.n	8001860 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <xTaskIncrementTick+0x170>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001902:	4915      	ldr	r1, [pc, #84]	; (8001958 <xTaskIncrementTick+0x16c>)
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d907      	bls.n	8001924 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e004      	b.n	8001924 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <xTaskIncrementTick+0x174>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <xTaskIncrementTick+0x174>)
 8001922:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <xTaskIncrementTick+0x178>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800192c:	2301      	movs	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001930:	697b      	ldr	r3, [r7, #20]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000428 	.word	0x20000428
 8001940:	20000404 	.word	0x20000404
 8001944:	200003b8 	.word	0x200003b8
 8001948:	200003bc 	.word	0x200003bc
 800194c:	20000418 	.word	0x20000418
 8001950:	20000420 	.word	0x20000420
 8001954:	20000408 	.word	0x20000408
 8001958:	20000304 	.word	0x20000304
 800195c:	20000300 	.word	0x20000300
 8001960:	20000410 	.word	0x20000410
 8001964:	20000414 	.word	0x20000414

08001968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <vTaskSwitchContext+0xa0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <vTaskSwitchContext+0xa4>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800197c:	e03f      	b.n	80019fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <vTaskSwitchContext+0xa4>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <vTaskSwitchContext+0xa8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	f1c3 031f 	rsb	r3, r3, #31
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	491e      	ldr	r1, [pc, #120]	; (8001a14 <vTaskSwitchContext+0xac>)
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10a      	bne.n	80019c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80019ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b2:	f383 8811 	msr	BASEPRI, r3
 80019b6:	f3bf 8f6f 	isb	sy
 80019ba:	f3bf 8f4f 	dsb	sy
 80019be:	607b      	str	r3, [r7, #4]
}
 80019c0:	bf00      	nop
 80019c2:	e7fe      	b.n	80019c2 <vTaskSwitchContext+0x5a>
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <vTaskSwitchContext+0xac>)
 80019d0:	4413      	add	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3308      	adds	r3, #8
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d104      	bne.n	80019f4 <vTaskSwitchContext+0x8c>
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <vTaskSwitchContext+0xb0>)
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000428 	.word	0x20000428
 8001a0c:	20000414 	.word	0x20000414
 8001a10:	20000408 	.word	0x20000408
 8001a14:	20000304 	.word	0x20000304
 8001a18:	20000300 	.word	0x20000300

08001a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001a24:	f000 f852 	bl	8001acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <prvIdleTask+0x28>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d9f9      	bls.n	8001a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <prvIdleTask+0x2c>)
 8001a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001a40:	e7f0      	b.n	8001a24 <prvIdleTask+0x8>
 8001a42:	bf00      	nop
 8001a44:	20000304 	.word	0x20000304
 8001a48:	e000ed04 	.word	0xe000ed04

08001a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e00c      	b.n	8001a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <prvInitialiseTaskLists+0x60>)
 8001a64:	4413      	add	r3, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fb48 	bl	80010fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b06      	cmp	r3, #6
 8001a76:	d9ef      	bls.n	8001a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <prvInitialiseTaskLists+0x64>)
 8001a7a:	f7ff fb3f 	bl	80010fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a7e:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <prvInitialiseTaskLists+0x68>)
 8001a80:	f7ff fb3c 	bl	80010fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <prvInitialiseTaskLists+0x6c>)
 8001a86:	f7ff fb39 	bl	80010fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <prvInitialiseTaskLists+0x70>)
 8001a8c:	f7ff fb36 	bl	80010fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <prvInitialiseTaskLists+0x74>)
 8001a92:	f7ff fb33 	bl	80010fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <prvInitialiseTaskLists+0x78>)
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <prvInitialiseTaskLists+0x64>)
 8001a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <prvInitialiseTaskLists+0x7c>)
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <prvInitialiseTaskLists+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000304 	.word	0x20000304
 8001ab0:	20000390 	.word	0x20000390
 8001ab4:	200003a4 	.word	0x200003a4
 8001ab8:	200003c0 	.word	0x200003c0
 8001abc:	200003d4 	.word	0x200003d4
 8001ac0:	200003ec 	.word	0x200003ec
 8001ac4:	200003b8 	.word	0x200003b8
 8001ac8:	200003bc 	.word	0x200003bc

08001acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ad2:	e019      	b.n	8001b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001ad4:	f000 f9f2 	bl	8001ebc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <prvCheckTasksWaitingTermination+0x50>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fb8f 	bl	8001208 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <prvCheckTasksWaitingTermination+0x54>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <prvCheckTasksWaitingTermination+0x54>)
 8001af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <prvCheckTasksWaitingTermination+0x58>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <prvCheckTasksWaitingTermination+0x58>)
 8001afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001afe:	f000 fa0d 	bl	8001f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f810 	bl	8001b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <prvCheckTasksWaitingTermination+0x58>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e1      	bne.n	8001ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003d4 	.word	0x200003d4
 8001b20:	20000400 	.word	0x20000400
 8001b24:	200003e8 	.word	0x200003e8

08001b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d108      	bne.n	8001b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fb42 	bl	80021c8 <vPortFree>
				vPortFree( pxTCB );
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fb3f 	bl	80021c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001b4a:	e018      	b.n	8001b7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d103      	bne.n	8001b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fb36 	bl	80021c8 <vPortFree>
	}
 8001b5c:	e00f      	b.n	8001b7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d00a      	beq.n	8001b7e <prvDeleteTCB+0x56>
	__asm volatile
 8001b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6c:	f383 8811 	msr	BASEPRI, r3
 8001b70:	f3bf 8f6f 	isb	sy
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	60fb      	str	r3, [r7, #12]
}
 8001b7a:	bf00      	nop
 8001b7c:	e7fe      	b.n	8001b7c <prvDeleteTCB+0x54>
	}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <prvResetNextTaskUnblockTime+0x40>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <prvResetNextTaskUnblockTime+0x14>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <prvResetNextTaskUnblockTime+0x16>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <prvResetNextTaskUnblockTime+0x44>)
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001baa:	e008      	b.n	8001bbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <prvResetNextTaskUnblockTime+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <prvResetNextTaskUnblockTime+0x44>)
 8001bbc:	6013      	str	r3, [r2, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	200003b8 	.word	0x200003b8
 8001bcc:	20000420 	.word	0x20000420

08001bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <xTaskGetSchedulerState+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001bde:	2301      	movs	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e008      	b.n	8001bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <xTaskGetSchedulerState+0x38>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001bec:	2302      	movs	r3, #2
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	e001      	b.n	8001bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001bf6:	687b      	ldr	r3, [r7, #4]
	}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000040c 	.word	0x2000040c
 8001c08:	20000428 	.word	0x20000428

08001c0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3304      	adds	r3, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff faf0 	bl	8001208 <uxListRemove>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10b      	bne.n	8001c46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2201      	movs	r2, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4013      	ands	r3, r2
 8001c42:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001c44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d10a      	bne.n	8001c64 <prvAddCurrentTaskToDelayedList+0x58>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	481a      	ldr	r0, [pc, #104]	; (8001cc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001c5e:	f7ff fa78 	bl	8001152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c62:	e026      	b.n	8001cb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d209      	bcs.n	8001c90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <prvAddCurrentTaskToDelayedList+0xc0>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3304      	adds	r3, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4610      	mov	r0, r2
 8001c8a:	f7ff fa85 	bl	8001198 <vListInsert>
}
 8001c8e:	e010      	b.n	8001cb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7ff fa7b 	bl	8001198 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d202      	bcs.n	8001cb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	6013      	str	r3, [r2, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000404 	.word	0x20000404
 8001cc0:	20000300 	.word	0x20000300
 8001cc4:	20000408 	.word	0x20000408
 8001cc8:	200003ec 	.word	0x200003ec
 8001ccc:	200003bc 	.word	0x200003bc
 8001cd0:	200003b8 	.word	0x200003b8
 8001cd4:	20000420 	.word	0x20000420

08001cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3b04      	subs	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f023 0201 	bic.w	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3b04      	subs	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d08:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <pxPortInitialiseStack+0x54>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3b14      	subs	r3, #20
 8001d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3b20      	subs	r3, #32
 8001d1e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001d20:	68fb      	ldr	r3, [r7, #12]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	08001d31 	.word	0x08001d31

08001d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <prvTaskExitError+0x54>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d42:	d00a      	beq.n	8001d5a <prvTaskExitError+0x2a>
	__asm volatile
 8001d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d48:	f383 8811 	msr	BASEPRI, r3
 8001d4c:	f3bf 8f6f 	isb	sy
 8001d50:	f3bf 8f4f 	dsb	sy
 8001d54:	60fb      	str	r3, [r7, #12]
}
 8001d56:	bf00      	nop
 8001d58:	e7fe      	b.n	8001d58 <prvTaskExitError+0x28>
	__asm volatile
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	60bb      	str	r3, [r7, #8]
}
 8001d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001d6e:	bf00      	nop
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0fc      	beq.n	8001d70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000020 	.word	0x20000020
	...

08001d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <pxCurrentTCBConst2>)
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	6808      	ldr	r0, [r1, #0]
 8001d96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d9a:	f380 8809 	msr	PSP, r0
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f04f 0000 	mov.w	r0, #0
 8001da6:	f380 8811 	msr	BASEPRI, r0
 8001daa:	f04e 0e0d 	orr.w	lr, lr, #13
 8001dae:	4770      	bx	lr

08001db0 <pxCurrentTCBConst2>:
 8001db0:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop

08001db8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <prvPortStartFirstTask+0x1c>)
 8001dba:	6800      	ldr	r0, [r0, #0]
 8001dbc:	6800      	ldr	r0, [r0, #0]
 8001dbe:	f380 8808 	msr	MSP, r0
 8001dc2:	b662      	cpsie	i
 8001dc4:	b661      	cpsie	f
 8001dc6:	f3bf 8f4f 	dsb	sy
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	df00      	svc	0
 8001dd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001dd2:	bf00      	nop
 8001dd4:	e000ed08 	.word	0xe000ed08

08001dd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001dde:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <xPortStartScheduler+0xd0>)
 8001de0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	22ff      	movs	r2, #255	; 0xff
 8001dee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <xPortStartScheduler+0xd4>)
 8001e04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e06:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e0c:	e009      	b.n	8001e22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2a:	2b80      	cmp	r3, #128	; 0x80
 8001e2c:	d0ef      	beq.n	8001e0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00a      	beq.n	8001e50 <xPortStartScheduler+0x78>
	__asm volatile
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	60bb      	str	r3, [r7, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	e7fe      	b.n	8001e4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e62:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <xPortStartScheduler+0xd8>)
 8001e64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <xPortStartScheduler+0xdc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <xPortStartScheduler+0xdc>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <xPortStartScheduler+0xdc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <xPortStartScheduler+0xdc>)
 8001e80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001e84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001e86:	f000 f8b9 	bl	8001ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <xPortStartScheduler+0xe0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001e90:	f7ff ff92 	bl	8001db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001e94:	f7ff fd68 	bl	8001968 <vTaskSwitchContext>
	prvTaskExitError();
 8001e98:	f7ff ff4a 	bl	8001d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e400 	.word	0xe000e400
 8001eac:	2000042c 	.word	0x2000042c
 8001eb0:	20000430 	.word	0x20000430
 8001eb4:	e000ed20 	.word	0xe000ed20
 8001eb8:	20000020 	.word	0x20000020

08001ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	607b      	str	r3, [r7, #4]
}
 8001ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <vPortEnterCritical+0x58>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <vPortEnterCritical+0x58>)
 8001ede:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <vPortEnterCritical+0x58>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10f      	bne.n	8001f08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <vPortEnterCritical+0x5c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <vPortEnterCritical+0x4c>
	__asm volatile
 8001ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef6:	f383 8811 	msr	BASEPRI, r3
 8001efa:	f3bf 8f6f 	isb	sy
 8001efe:	f3bf 8f4f 	dsb	sy
 8001f02:	603b      	str	r3, [r7, #0]
}
 8001f04:	bf00      	nop
 8001f06:	e7fe      	b.n	8001f06 <vPortEnterCritical+0x4a>
	}
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000020 	.word	0x20000020
 8001f18:	e000ed04 	.word	0xe000ed04

08001f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <vPortExitCritical+0x4c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10a      	bne.n	8001f40 <vPortExitCritical+0x24>
	__asm volatile
 8001f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2e:	f383 8811 	msr	BASEPRI, r3
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	607b      	str	r3, [r7, #4]
}
 8001f3c:	bf00      	nop
 8001f3e:	e7fe      	b.n	8001f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <vPortExitCritical+0x4c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <vPortExitCritical+0x4c>)
 8001f48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <vPortExitCritical+0x4c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <vPortExitCritical+0x42>
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001f5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	20000020 	.word	0x20000020
 8001f6c:	00000000 	.word	0x00000000

08001f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001f70:	f3ef 8009 	mrs	r0, PSP
 8001f74:	f3bf 8f6f 	isb	sy
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <pxCurrentTCBConst>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f80:	6010      	str	r0, [r2, #0]
 8001f82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001f86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f8a:	f380 8811 	msr	BASEPRI, r0
 8001f8e:	f7ff fceb 	bl	8001968 <vTaskSwitchContext>
 8001f92:	f04f 0000 	mov.w	r0, #0
 8001f96:	f380 8811 	msr	BASEPRI, r0
 8001f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	6808      	ldr	r0, [r1, #0]
 8001fa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fa6:	f380 8809 	msr	PSP, r0
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	4770      	bx	lr

08001fb0 <pxCurrentTCBConst>:
 8001fb0:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop

08001fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8001fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc2:	f383 8811 	msr	BASEPRI, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	607b      	str	r3, [r7, #4]
}
 8001fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001fd2:	f7ff fc0b 	bl	80017ec <xTaskIncrementTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <xPortSysTickHandler+0x40>)
 8001fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f383 8811 	msr	BASEPRI, r3
}
 8001fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	e000ed04 	.word	0xe000ed04

08001ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <vPortSetupTimerInterrupt+0x30>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <vPortSetupTimerInterrupt+0x34>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <vPortSetupTimerInterrupt+0x38>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a09      	ldr	r2, [pc, #36]	; (8002038 <vPortSetupTimerInterrupt+0x3c>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	4a08      	ldr	r2, [pc, #32]	; (800203c <vPortSetupTimerInterrupt+0x40>)
 800201a:	3b01      	subs	r3, #1
 800201c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800201e:	4b03      	ldr	r3, [pc, #12]	; (800202c <vPortSetupTimerInterrupt+0x30>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	e000e010 	.word	0xe000e010
 8002030:	e000e018 	.word	0xe000e018
 8002034:	20000018 	.word	0x20000018
 8002038:	10624dd3 	.word	0x10624dd3
 800203c:	e000e014 	.word	0xe000e014

08002040 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800204c:	f7ff fb24 	bl	8001698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002050:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <pvPortMalloc+0x174>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002058:	f000 f910 	bl	800227c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800205c:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <pvPortMalloc+0x178>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 808e 	bne.w	8002186 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01d      	beq.n	80020ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002070:	2208      	movs	r2, #8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	2b00      	cmp	r3, #0
 8002080:	d014      	beq.n	80020ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f023 0307 	bic.w	r3, r3, #7
 8002088:	3308      	adds	r3, #8
 800208a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <pvPortMalloc+0x6c>
	__asm volatile
 8002096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209a:	f383 8811 	msr	BASEPRI, r3
 800209e:	f3bf 8f6f 	isb	sy
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	617b      	str	r3, [r7, #20]
}
 80020a8:	bf00      	nop
 80020aa:	e7fe      	b.n	80020aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d069      	beq.n	8002186 <pvPortMalloc+0x146>
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <pvPortMalloc+0x17c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d864      	bhi.n	8002186 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <pvPortMalloc+0x180>)
 80020be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <pvPortMalloc+0x180>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020c6:	e004      	b.n	80020d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d903      	bls.n	80020e4 <pvPortMalloc+0xa4>
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f1      	bne.n	80020c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <pvPortMalloc+0x174>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d04b      	beq.n	8002186 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2208      	movs	r2, #8
 80020f4:	4413      	add	r3, r2
 80020f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	2308      	movs	r3, #8
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	429a      	cmp	r2, r3
 800210e:	d91f      	bls.n	8002150 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <pvPortMalloc+0xf8>
	__asm volatile
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	613b      	str	r3, [r7, #16]
}
 8002134:	bf00      	nop
 8002136:	e7fe      	b.n	8002136 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800214a:	69b8      	ldr	r0, [r7, #24]
 800214c:	f000 f8f8 	bl	8002340 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <pvPortMalloc+0x17c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <pvPortMalloc+0x17c>)
 800215c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <pvPortMalloc+0x17c>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <pvPortMalloc+0x184>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d203      	bcs.n	8002172 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <pvPortMalloc+0x17c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <pvPortMalloc+0x184>)
 8002170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <pvPortMalloc+0x178>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	431a      	orrs	r2, r3
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002186:	f7ff fa95 	bl	80016b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <pvPortMalloc+0x16a>
	__asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	60fb      	str	r3, [r7, #12]
}
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <pvPortMalloc+0x168>
	return pvReturn;
 80021aa:	69fb      	ldr	r3, [r7, #28]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000103c 	.word	0x2000103c
 80021b8:	20001048 	.word	0x20001048
 80021bc:	20001040 	.word	0x20001040
 80021c0:	20001034 	.word	0x20001034
 80021c4:	20001044 	.word	0x20001044

080021c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d048      	beq.n	800226c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80021da:	2308      	movs	r3, #8
 80021dc:	425b      	negs	r3, r3
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4413      	add	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <vPortFree+0xac>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <vPortFree+0x44>
	__asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	60fb      	str	r3, [r7, #12]
}
 8002208:	bf00      	nop
 800220a:	e7fe      	b.n	800220a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <vPortFree+0x62>
	__asm volatile
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	60bb      	str	r3, [r7, #8]
}
 8002226:	bf00      	nop
 8002228:	e7fe      	b.n	8002228 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <vPortFree+0xac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d019      	beq.n	800226c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d115      	bne.n	800226c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <vPortFree+0xac>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002250:	f7ff fa22 	bl	8001698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <vPortFree+0xb0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4413      	add	r3, r2
 800225e:	4a06      	ldr	r2, [pc, #24]	; (8002278 <vPortFree+0xb0>)
 8002260:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002262:	6938      	ldr	r0, [r7, #16]
 8002264:	f000 f86c 	bl	8002340 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002268:	f7ff fa24 	bl	80016b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20001048 	.word	0x20001048
 8002278:	20001040 	.word	0x20001040

0800227c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002282:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002286:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <prvHeapInit+0xac>)
 800228a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3307      	adds	r3, #7
 800229a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0307 	bic.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <prvHeapInit+0xac>)
 80022ac:	4413      	add	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022b4:	4a1d      	ldr	r2, [pc, #116]	; (800232c <prvHeapInit+0xb0>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <prvHeapInit+0xb0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80022c8:	2208      	movs	r2, #8
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0307 	bic.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <prvHeapInit+0xb4>)
 80022dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <prvHeapInit+0xb4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <prvHeapInit+0xb4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <prvHeapInit+0xb4>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <prvHeapInit+0xb8>)
 800230a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <prvHeapInit+0xbc>)
 8002312:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <prvHeapInit+0xc0>)
 8002316:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000434 	.word	0x20000434
 800232c:	20001034 	.word	0x20001034
 8002330:	2000103c 	.word	0x2000103c
 8002334:	20001044 	.word	0x20001044
 8002338:	20001040 	.word	0x20001040
 800233c:	20001048 	.word	0x20001048

08002340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <prvInsertBlockIntoFreeList+0xa8>)
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e002      	b.n	8002354 <prvInsertBlockIntoFreeList+0x14>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d8f7      	bhi.n	800234e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d108      	bne.n	8002382 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	441a      	add	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	441a      	add	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d118      	bne.n	80023c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <prvInsertBlockIntoFreeList+0xac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d00d      	beq.n	80023be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	441a      	add	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e008      	b.n	80023d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <prvInsertBlockIntoFreeList+0xac>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e003      	b.n	80023d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d002      	beq.n	80023de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20001034 	.word	0x20001034
 80023ec:	2000103c 	.word	0x2000103c

080023f0 <__libc_init_array>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	2600      	movs	r6, #0
 80023f4:	4d0c      	ldr	r5, [pc, #48]	; (8002428 <__libc_init_array+0x38>)
 80023f6:	4c0d      	ldr	r4, [pc, #52]	; (800242c <__libc_init_array+0x3c>)
 80023f8:	1b64      	subs	r4, r4, r5
 80023fa:	10a4      	asrs	r4, r4, #2
 80023fc:	42a6      	cmp	r6, r4
 80023fe:	d109      	bne.n	8002414 <__libc_init_array+0x24>
 8002400:	f000 f81a 	bl	8002438 <_init>
 8002404:	2600      	movs	r6, #0
 8002406:	4d0a      	ldr	r5, [pc, #40]	; (8002430 <__libc_init_array+0x40>)
 8002408:	4c0a      	ldr	r4, [pc, #40]	; (8002434 <__libc_init_array+0x44>)
 800240a:	1b64      	subs	r4, r4, r5
 800240c:	10a4      	asrs	r4, r4, #2
 800240e:	42a6      	cmp	r6, r4
 8002410:	d105      	bne.n	800241e <__libc_init_array+0x2e>
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	f855 3b04 	ldr.w	r3, [r5], #4
 8002418:	4798      	blx	r3
 800241a:	3601      	adds	r6, #1
 800241c:	e7ee      	b.n	80023fc <__libc_init_array+0xc>
 800241e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002422:	4798      	blx	r3
 8002424:	3601      	adds	r6, #1
 8002426:	e7f2      	b.n	800240e <__libc_init_array+0x1e>
 8002428:	08002470 	.word	0x08002470
 800242c:	08002470 	.word	0x08002470
 8002430:	08002470 	.word	0x08002470
 8002434:	08002474 	.word	0x08002474

08002438 <_init>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	bf00      	nop
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr

08002444 <_fini>:
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	bf00      	nop
 8002448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244a:	bc08      	pop	{r3}
 800244c:	469e      	mov	lr, r3
 800244e:	4770      	bx	lr
